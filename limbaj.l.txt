%{
    #include "y.tab.h"
    int nr_linie=1;
%}

%option yylineno

litera [a-zA-Z]
cifra [0-9]
op_unara "++"|"--"

%%
^"#include"[ ]*<.+\.h>      { return INCLUDE; }
"afiseaza"                  { return PRINTFF; }
"citeste"                   { return SCANFF; }

    /*tipuri variabile*/
"intreg"                    { return INT; }
"float"                     { return FLOAT; }
"bool"                      {return BOOL;}
"char"                      { return CHAR; }
"constanta"                 {return CONST;}

    /*tipuri vectori*/
"intV"                      {return INTV;}
"floatV"                    {return FLOATV;}
"boolV"                     {return BOOLV;}
"charV"                     {return CHARV;}

    /*user defined data types*/
"clasa"                     {return CLASS;}
"structura"                 {return STRUCT;}

    /*tipuri functii*/
"voidF"                     { return VOIDF; }
"intF"                      {return INTF;}
"boolF"                     {return BOOLF;}
"charF"                     {return CHARF;}
"floatF"                    {return FLOATF;}
"returneaza"                { return RETURN; }

    /*structuri repetitive*/
"pentru"                    { return FOR; }
"daca"	                    { return IF; }
"altfel"	                { return ELSE; }
"cat timp"                  {return WHILE;}

[-]?{cifra}+                { return NUMBER; }
[-]?{cifra}+\.{cifra}{1,6}  { return FLOAT_NUM; }
{litera}({litera}|{cifra})* { return ID; }
{op_unara}                  { return UNARY; }
"true"                      { return TRUE; }
"false"                     { return FALSE; }
"<="                        { return LE; }
">="                        { return GE; }
"=="                        { return EQ; }
"!="                        { return NE; }
">"	                        { return GT; }
"<"	                        { return LT; }
"&&"	                    { return AND; }
"||"	                    { return OR; }
"+"                         { return ADD; }
"-"                         { return SUBTRACT; }
"/"                         { return DIVIDE; }
"*"                         { return MULTIPLY; }
\/\/.*                      { ; }
\/\*(.*\n)*.*\*\/           { ; } 
[ \t]*                      { ; }
[\n]                        { nr_linie++; }
.	                        { return *yytext; }
["].*["]                    { return STR; }
['].[']                     { return CHARACTER; }

%%

int yywrap() {
    return 1;
}