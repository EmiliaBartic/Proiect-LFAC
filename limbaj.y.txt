%{
    #include<stdio.h>
    #include<string.h>
    #include<stdlib.h>
    #include<ctype.h>
    
    void yyerror(const char *s);
    int yylex();
    int yywrap();
    extern int nr_linie;
%}


%token CHARACTER CONST PRINTFF SCANFF INTV FLOATV BOOLV CHARV CLASS STRUCT 
%token INT WHILE FLOAT BOOL CHAR VOIDF INTF BOOLF CHARF FLOATF FOR IF ELSE TRUE FALSE NUMBER FLOAT_NUM ID LE GE EQ NE GT LT 
%token AND OR STR ADD MULTIPLY DIVIDE SUBTRACT UNARY INCLUDE RETURN 
%%

program: headers function main '(' ')' '{' body return '}' {printf("program corect sintactic\n");}
;

headers: headers headers
| INCLUDE
;

main: type_function ID
;

type_function: VOIDF
| INTF
| BOOLF
| CHARF
| FLOATF
;

function: type_function ID '(' parametrii ')' '{' body return '}'
| "fara functie"
;

parametrii: parametrii ',' datatype_var ID
| datatype_var ID
| parametrii ',' datatype_vector ID '['value']'
| datatype_vector ID '['value']'
;

datatype_var: INT
| FLOAT 
| BOOL 
| CHAR 
;

datatype_vector : INTV
| FLOATV
| BOOLV
| CHARV
;

body: FOR '(' statement ';' condition ';' statement ')' '{' body '}'
| WHILE '(' condition ')' '{' body '}'
| IF '(' condition ')' '{' body '}' else
| statement ';' 
| body body
| PRINTFF '(' STR ')' ';'
| SCANFF '(' STR ',' '&' ID ')' ';'
;

else: ELSE '{' body '}'
|
;

condition: value relatie value 
| TRUE 
| FALSE
;

statement: datatype_var ID init 
| ID '=' expression 
| ID relatie expression
| CONST ID init
| ID UNARY 
| UNARY ID
| datatype_vector ID '['value']'
| datatype_vector ID '['']' '=' '{' valori_vector '}'
| ID '['value']' '=' expression
| ID '['value']' UNARY
| UNARY ID '['value']'
| CLASS ID '{' clasa_struct_declaratii '}'
| STRUCT ID '{' clasa_struct_declaratii '}'
;

clasa_struct_declaratii : clasa_struct_declaratii  datatype_var ID ';'
| clasa_struct_declaratii  datatype_vector ID '['value']' ';'
| datatype_var ID ';'
| datatype_vector ID '['value']' ';'
;

valori_vector: value ',' value
| value
;
init: '=' value 
|
;

expression: expression arithmetic expression
| value
;

arithmetic: ADD 
| SUBTRACT 
| MULTIPLY
| DIVIDE
;

relatie: LT
| GT
| LE
| GE
| EQ
| NE
;

value: NUMBER
| FLOAT_NUM
| CHARACTER
| ID
;

return: RETURN value ';' 
|
;

%%

int main() {
    yyparse();
}

void yyerror(const char* msg) {
    printf("eroare: %s la linia:%d\n",msg,nr_linie);
}
